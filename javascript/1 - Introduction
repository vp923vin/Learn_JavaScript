Que -  What is JavaScript?
Ans - JavaScript is created to “make web pages alive”.The programs in this language are called scripts
      They can be written right in a web page’s HTML and run automatically as the page loads.
      Scripts are provided and executed as plain text. They don’t need special preparation or compilation to run.


Que - Why is it called JavaScript?
Ans - When JavaScript was created, it initially had another name: “LiveScript”. 
      But Java was very popular at that time, so it was decided that positioning a new language as a 
      “younger brother” of Java would help.
      But as it evolved, JavaScript became a fully independent language with its own specification called    
      ECMAScript, and now it has no relation to Java at all.


Today, JavaScript can execute not only in the browser, but also on the server, or actually on any device 
that has a special program called the JavaScript engine.


Que - More About JavaScript engine?
Ans - A JavaScript engine is a software component that executes JavaScript code. The first JavaScript engines were  
      mere interpreters, but all relevant modern engines use just-in-time compilation for improved performance.

      JavaScript engines are typically developed by web browser vendors, and every major browser has one. In a 
      browser, the JavaScript engine runs in concert with the rendering engine via the Document Object Model and 
      Web IDL bindings. However, the use of JavaScript engines is not limited to browsers; for example, the V8 
      engine is a core component of the Node.js runtime system.

      Since ECMAScript is the standardized specification of JavaScript, ECMAScript engine is another name for these 
      implementations. With the advent of WebAssembly, some engines can also execute this code in the same sandbox 
      as regular JavaScript code.


The browser has an embedded engine sometimes called a “JavaScript virtual machine”.
Different engines have different “codenames”. For example:
    a. V8 – in Chrome, Opera and Edge.
    b. SpiderMonkey – in Firefox.
    c. There are other codenames like “Chakra” for IE, “JavaScriptCore”, “Nitro” and “SquirrelFish” for Safari, etc.


Que - How do engines work?
Ans - Engines are complicated. But the basics are easy.
      a. The engine (embedded if it’s a browser) reads (“parses”) the script. 
      b. Then it converts (“compiles”) the script to machine code. 
      c. And then the machine code runs, pretty fast.

      The engine applies optimizations at each step of the process. It even watches the compiled script as it runs, 
      analyzes the data that flows through it, and further optimizes the machine code based on that knowledge.


Que - What can in-browser JavaScript do?
Ans - Modern JavaScript is a “safe” programming language. It does not provide low-level access to 
      memory or the CPU, because it was initially created for browsers which do not require it.

      JavaScript’s capabilities greatly depend on the environment it’s running in. 
      For instance, Node.js supports functions that allow JavaScript to read/write arbitrary files, 
      perform network requests, etc.
      In-browser JavaScript can do everything related to webpage manipulation, interaction with the user, 
      and the webserver.
      For instance, in-browser JavaScript is able to:
        a. Add new HTML to the page, change the existing content, modify styles.
        b. React to user actions, run on mouse clicks, pointer movements, key presses.
        c. Send requests over the network to remote servers, download and upload files 
            (so-called AJAX and COMET technologies).
        d. Get and set cookies, ask questions to the visitor, show messages.
        e. Remember the data on the client-side (“local storage”).


Que - What CAN’T in-browser JavaScript do?
Ans - JavaScript’s abilities in the browser are limited to protect the user’s safety. 
      The aim is to prevent an evil webpage from accessing private information or harming the user’s data.

      Examples of such restrictions include:

        a. JavaScript on a webpage may not read/write arbitrary files on the hard disk, 
           copy them or execute programs. It has no direct access to OS functions.
           Modern browsers allow it to work with files, but the access is limited and only provided if the user 
           does certain actions, like “dropping” a file into a browser window or selecting it via an <input> tag.

           There are ways to interact with the camera/microphone and other devices, but they require a user’s 
           explicit permission. So a JavaScript-enabled page may not sneakily enable a web-camera, observe the 
           surroundings and send the information to the NSA(National Security Agency).

        b. JavaScript can easily communicate over the net to the server where the current page came from. 
           But its ability to receive data from other sites/domains is crippled. Though possible, it requires 
           explicit agreement (expressed in HTTP headers) from the remote side. 
           Once again, that’s a safety limitation.

        Such limitations do not exist if JavaScript is used outside of the browser, for example on a server. 
        Modern browsers also allow plugins/extensions which may ask for extended permissions.

Que - What makes JavaScript unique?
Ans - There are at least three great things about JavaScript:
        a. Full integration with HTML/CSS.
        b. Simple things are done simply.
        c. Supported by all major browsers and enabled by default.
     JavaScript is the only browser technology that combines these three things.
     That’s what makes JavaScript unique. That’s why it’s the most widespread tool for creating browser interfaces.
     That said, JavaScript can be used to create servers, mobile applications, etc.


Que - comments in javascript?
Ans - single line comment "//"
      multi-line comment "/*  here put your comment  */".
      